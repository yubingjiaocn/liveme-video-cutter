AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Cut 30s video from a live stream
Parameters:
  TaskDict:
    Description: List of task
    Type: String
  Task_Save_Type:
    Description: Task Save Type
    Type: String
  AudioSGEndPoint:
    Description: Endpoint Name in Audio Sagemaker
    Type: String
  URLPattern:
    Description: Pattern used in live stream URL
    Type: String
  RecordBucketName:
    Description: Bucket name to save recording
    Type: String
  RecordTableName:
    Description: DynamoDB Table name for tracking recording
    Type: String
  ResultESDomain:
    Description: ElasticSearch Domain for result store
    Type: String  
  ResultESEndpoint:
    Description: ElasticSearch endpoint URL for result store
    Type: String
  ResultESIndex:
    Description: Index name in ElasticSearch
    Type: String  
  VideoSGEndPoint:
    Description: Endpoint Name in Video Sagemaker
    Type: String  
  CWLogGroup:
    Description: Cloudwatch Log group 
    Type: String
  DDBTTL:
    Description: TTL for each item in DynamoDB
    Type: String
  CircuitBreakerThreshold:
    Description: Maxinum number of live stream before delete
    Type: String  
Resources:

  FFMpeg:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/ffmpeg
      CompatibleRuntimes:
        - python3.9

  AddVideotoDB:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/add_video/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 10
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref RecordTableName
          LOG_GROUP: !Ref CWLogGroup
          DDB_TTL: !Ref DDBTTL
          URL_PATTERN: !Ref URLPattern
          TASK_DICT: !Ref TaskDict
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RecordTableName   
        - Statement:
          - Sid: PutCWLogsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'     

  DeleteVideofromDB:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/delete_video/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 10
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref RecordTableName
          LOG_GROUP: !Ref CWLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RecordTableName   
        - Statement:
          - Sid: PutCWLogsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'            

  VideoCutter:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/video_cutter/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: 512
      Timeout: 60
      Tracing: Active
      Layers:
        - !Ref FFMpeg
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      ReservedConcurrentExecutions: 1500
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Destination: !GetAtt VideoCutterErrorHandling.Arn
            Type: Lambda 
      Environment:
        Variables:
          TABLE_NAME: !Ref RecordTableName
          BUCKET_NAME: !Ref RecordBucketName
          LOG_GROUP: !Ref CWLogGroup
          TASK_SAVE_TYPE: !Ref Task_Save_Type
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref RecordBucketName
        - DynamoDBWritePolicy:
            TableName: !Ref RecordTableName
        - Statement:
          - Sid: PutCWLogsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'            

  VideoScanner:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/video_scanner/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: 512
      Timeout: 180
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 60
        MaximumRetryAttempts: 0
      ReservedConcurrentExecutions: 1   
      Tracing: Active
      Events:
        CWSchedule:
          Type: Schedule
          Properties:
            Schedule: 'rate(2 minutes)'
            Name: VideoScanner
            Description: Cron for scanner
            Enabled: true
      Environment:
        Variables:
          TABLE_NAME: !Ref RecordTableName
          BUCKET_NAME: !Ref RecordBucketName
          VIDEO_CUTTER_NAME: !Ref VideoCutter
          LOG_GROUP: !Ref CWLogGroup
          DDB_TTL: !Ref DDBTTL
          TASK_NAME: 'task_video'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RecordTableName
        - LambdaInvokePolicy:
            FunctionName: !Ref VideoCutter
        - Statement:
          - Sid: PutCWLogsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'


  AudioScanner:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/audio_scanner/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: 512
      Timeout: 60
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 60
        MaximumRetryAttempts: 0
      ReservedConcurrentExecutions: 1
      Tracing: Active
      Events:
        CWSchedule:
          Type: Schedule
          Properties:
            Schedule: 'rate(1 minute)'
            Name: AudioScanner
            Description: Cron for scanner
            Enabled: true
      Environment:
        Variables:
          TABLE_NAME: !Ref RecordTableName
          BUCKET_NAME: !Ref RecordBucketName
          VIDEO_CUTTER_NAME: !Ref VideoCutter
          LOG_GROUP: !Ref CWLogGroup
          DDB_TTL: !Ref DDBTTL
          TASK_NAME: 'task_audio'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RecordTableName
        - LambdaInvokePolicy:
            FunctionName: !Ref VideoCutter
        - Statement:
          - Sid: PutCWLogsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'


  HealthChecker:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/healthchecker/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: 768
      Timeout: 180
      Tracing: Active
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 60
        MaximumRetryAttempts: 0
      ReservedConcurrentExecutions: 1
      Events:
        CWSchedule:
          Type: Schedule
          Properties:
            Schedule: 'rate(3 minutes)'
            Name: HealthChecker
            Description: Cron for health check
            Enabled: true
      Layers:
        - !Ref FFMpeg
      Environment:
        Variables:
          TABLE_NAME: !Ref RecordTableName
          LOG_GROUP: !Ref CWLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RecordTableName
        - Statement:
          - Sid: PutCWLogsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'     

  VideoSGTrigger:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/s3_sg_trigger_video/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: 256
      Timeout: 120
      Tracing: Active
      ReservedConcurrentExecutions: 112
      Environment:
        Variables:     
          BUCKET_NAME: !Ref RecordBucketName  
          ES_NAME: !Ref ResultESDomain
          ES_INDEX: !Ref ResultESIndex
          ES_ENDPOINT: !Ref ResultESEndpoint
          SG_ENDPOINT: !Ref VideoSGEndPoint
          LOG_GROUP: !Ref CWLogGroup
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref RecordBucketName
        - ElasticsearchHttpPostPolicy:
            DomainName: !Ref ResultESDomain
        - Statement:
          - Sid: SagemakerInvokeEndpointPolicy
            Effect: Allow
            Action:
            - sagemaker:InvokeEndpoint
            - sagemaker:ListEndpoints
            Resource: '*'
        - Statement:
          - Sid: PutCWLogsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'    



  AudioSGTrigger:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/s3_sg_trigger_audio/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 120
      Tracing: Active
      ReservedConcurrentExecutions: 42
      Environment:
        Variables:
          BUCKET_NAME: !Ref RecordBucketName
          ES_NAME: !Ref ResultESDomain
          ES_INDEX: !Ref ResultESIndex
          ES_ENDPOINT: !Ref ResultESEndpoint
          SG_ENDPOINT: !Ref AudioSGEndPoint
          LOG_GROUP: !Ref CWLogGroup
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref RecordBucketName
        - ElasticsearchHttpPostPolicy:
            DomainName: !Ref ResultESDomain
        - Statement:
          - Sid: SagemakerInvokeEndpointPolicy
            Effect: Allow
            Action:
            - sagemaker:InvokeEndpoint
            - sagemaker:ListEndpoints
            Resource: '*'
        - Statement:
          - Sid: PutCWLogsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'
#  QueuedInference:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: functions/sqs_sg_trigger/
#      Handler: app.lambda_handler
#      Runtime: python3.9
#      MemorySize: 256
#      Timeout: 120
#      Tracing: Active
#      ReservedConcurrentExecutions: 60
#      Environment:
#        Variables:
#          BUCKET_NAME: !Ref RecordBucketName
#          ES_NAME: !Ref ResultESDomain
#          ES_INDEX: !Ref ResultESIndex
#          ES_ENDPOINT: !Ref ResultESEndpoint
#          SG_ENDPOINT: !Ref SGEndPoint
#          LOG_GROUP: !Ref CWLogGroup
#      Policies:
#        - S3ReadPolicy:
#            BucketName: !Ref RecordBucketName
#        - ElasticsearchHttpPostPolicy:
#            DomainName: !Ref ResultESDomain
#        - Statement:
#          - Sid: SagemakerInvokeEndpointPolicy
#            Effect: Allow
#            Action:
#            - sagemaker:InvokeEndpoint
#            - sagemaker:ListEndpoints
#            Resource: '*'
#        - Statement:
#          - Sid: PutCWLogsPolicy
#            Effect: Allow
#            Action:
#            - logs:CreateLogGroup
#            - logs:CreateLogStream
#            - logs:PutLogEvents
#            - logs:DescribeLogStreams
#            Resource: '*'

  VideoCutterErrorHandling:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/video_cutter_error/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 10
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref RecordTableName
          LOG_GROUP: !Ref CWLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RecordTableName   
        - Statement:
          - Sid: PutCWLogsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'
            

  CircuitBreaker:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/circuit_breaker/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 60
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref RecordTableName
          LOG_GROUP: !Ref CWLogGroup
          CB_THRESHOLD: !Ref CircuitBreakerThreshold
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RecordTableName   
        - Statement:
          - Sid: PutCWEventsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'