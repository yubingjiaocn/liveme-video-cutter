AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Cut 30s video from a live stream
Parameters:
  RecordBucketName:
    Description: Bucket name to save recording
    Type: String
  RecordTableName:
    Description: DynamoDB Table name for tracking recording
    Type: String
  ResultESDomain:
    Description: ElasticSearch Domain for result store
    Type: String  
  ResultESEndpoint:
    Description: ElasticSearch endpoint URL for result store
    Type: String
  ResultESIndex:
    Description: Index name in ElasticSearch
    Type: String  
  SGEndPoint:
    Description: Endpoint Name in Sagemaker
    Type: String  
  CWLogGroup:
    Description: Cloudwatch Log group 
    Type: String
  DDBTTL:
    Description: TTL for each item in DynamoDB
    Type: String  
Resources:

  FFMpeg:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/ffmpeg
      CompatibleRuntimes:
        - python3.8

  AddVideotoDB:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/add_video/
      Handler: app.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 10
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref RecordTableName
          LOG_GROUP: !Ref CWLogGroup
          DDB_TTL: !Ref DDBTTL
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RecordTableName   
        - Statement:
          - Sid: PutCWEventsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'     

  DeleteVideofromDB:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/delete_video/
      Handler: app.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 10
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref RecordTableName
          LOG_GROUP: !Ref CWLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RecordTableName   
        - Statement:
          - Sid: PutCWEventsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'            

  VideoCutter:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/video_cutter/
      Handler: app.lambda_handler
      Runtime: python3.8
      MemorySize: 512
      Timeout: 50
      Tracing: Active
      Layers:
        - !Ref FFMpeg
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      ReservedConcurrentExecutions: 100  
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Destination: !GetAtt VideoCutterErrorHandling.Arn
            Type: Lambda 
      Environment:
        Variables:
          TABLE_NAME: !Ref RecordTableName
          BUCKET_NAME: !Ref RecordBucketName
          LOG_GROUP: !Ref CWLogGroup  
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref RecordBucketName
        - DynamoDBWritePolicy:
            TableName: !Ref RecordTableName
        - Statement:
          - Sid: PutCWEventsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'            

  Scanner:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/scanner/
      Handler: app.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 120
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 60
        MaximumRetryAttempts: 0
      ReservedConcurrentExecutions: 1   
      Tracing: Active
      Events:
        CWSchedule:
          Type: Schedule
          Properties:
            Schedule: 'rate(5 minutes)'
            Name: Scanner
            Description: Cron for scanner
            Enabled: true
      Environment:
        Variables:
          TABLE_NAME: !Ref RecordTableName
          BUCKET_NAME: !Ref RecordBucketName
          VIDEO_CUTTER_NAME: !Ref VideoCutter
          LOG_GROUP: !Ref CWLogGroup
          DDB_TTL: !Ref DDBTTL
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RecordTableName
        - LambdaInvokePolicy:
            FunctionName: !Ref VideoCutter
        - Statement:
          - Sid: PutCWEventsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'     

  HealthChecker:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/healthchecker/
      Handler: app.lambda_handler
      Runtime: python3.8
      MemorySize: 768
      Timeout: 180
      Tracing: Active
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 60
        MaximumRetryAttempts: 0
      ReservedConcurrentExecutions: 1
      Events:
        CWSchedule:
          Type: Schedule
          Properties:
            Schedule: 'rate(3 minutes)'
            Name: HealthChecker
            Description: Cron for health check
            Enabled: true
      Layers:
        - !Ref FFMpeg
      Environment:
        Variables:
          TABLE_NAME: !Ref RecordTableName
          LOG_GROUP: !Ref CWLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RecordTableName
        - Statement:
          - Sid: PutCWEventsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'     

  SGTrigger:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/s3_sg_trigger/
      Handler: app.lambda_handler
      Runtime: python3.8
      MemorySize: 256
      Timeout: 120
      Tracing: Active
      ReservedConcurrentExecutions: 112
      Environment:
        Variables:     
          BUCKET_NAME: !Ref RecordBucketName  
          ES_NAME: !Ref ResultESDomain
          ES_INDEX: !Ref ResultESIndex
          ES_ENDPOINT: !Ref ResultESEndpoint
          SG_ENDPOINT: !Ref SGEndPoint
          LOG_GROUP: !Ref CWLogGroup
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref RecordBucketName
        - ElasticsearchHttpPostPolicy:
            DomainName: !Ref ResultESDomain
        - Statement:
          - Sid: SagemakerInvokeEndpointPolicy
            Effect: Allow
            Action:
            - sagemaker:InvokeEndpoint
            - sagemaker:ListEndpoints
            Resource: '*'
        - Statement:
          - Sid: PutCWEventsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'     

  VideoCutterErrorHandling:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/video_cutter_error/
      Handler: app.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 10
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref RecordTableName
          LOG_GROUP: !Ref CWLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RecordTableName   
        - Statement:
          - Sid: PutCWEventsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'

  CircuitBreaker:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/circuit_breaker/
      Handler: app.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 10
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref RecordTableName
          LOG_GROUP: !Ref CWLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RecordTableName   
        - Statement:
          - Sid: PutCWEventsPolicy
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: '*'